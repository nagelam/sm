import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from catboost import CatBoostClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
import plotly.figure_factory as ff

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ù–∞–≥–µ–ª—å_–ê—Ä–∫–∞–¥–∏–π_–ú–∏—Ö–∞–π–ª–æ–≤–∏—á_16_–≤–∞—Ä–∏–∞–Ω—Ç_League_of_Legends_Dataset",
    layout="wide",
    initial_sidebar_state="collapsed"
)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
st.title("–ù–∞–≥–µ–ª—å_–ê—Ä–∫–∞–¥–∏–π_–ú–∏—Ö–∞–π–ª–æ–≤–∏—á_16_–≤–∞—Ä–∏–∞–Ω—Ç_League_of_Legends_Dataset")

# –û–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
st.markdown("""
### –û–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö League of Legends

–î–∞–Ω–Ω—ã–π –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∞—Ç—á–µ–π –ø–æ–ø—É–ª—è—Ä–Ω–æ–π –∏–≥—Ä—ã League of Legends, –≥–¥–µ –¥–≤–µ –∫–æ–º–∞–Ω–¥—ã (—Å–∏–Ω—è—è –∏ –∫—Ä–∞—Å–Ω–∞—è) 
—Å—Ä–∞–∂–∞—é—Ç—Å—è –∑–∞ –ø–æ–±–µ–¥—É. –ö–∞–∂–¥–∞—è –∑–∞–ø–∏—Å—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ–¥–∏–Ω –º–∞—Ç—á –∏ –≤–∫–ª—é—á–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–≥—Ä–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏:
- **–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏**: —É–±–∏–π—Å—Ç–≤–∞, —Å–º–µ—Ä—Ç–∏, –ø–æ–º–æ—â–∏, –∑–æ–ª–æ—Ç–æ, –æ–ø—ã—Ç
- **–û–±—ä–µ–∫—Ç–∏–≤—ã**: –¥—Ä–∞–∫–æ–Ω—ã, –±–∞—Ä–æ–Ω—ã, –±–∞—à–Ω–∏, –∏–Ω–≥–∏–±–∏—Ç–æ—Ä—ã  
- **–°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã**: –ø–µ—Ä–≤–∞—è –∫—Ä–æ–≤—å, –≤–∏–∂–Ω-–∫–æ–Ω—Ç—Ä–æ–ª—å, —É—Ä–æ–Ω
- **–¶–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è**: –ø–æ–±–µ–¥–∞ —Å–∏–Ω–µ–π –∫–æ–º–∞–Ω–¥—ã (blueWins: 1 = –ø–æ–±–µ–¥–∞ —Å–∏–Ω–∏—Ö, 0 = –ø–æ–±–µ–¥–∞ –∫—Ä–∞—Å–Ω—ã—Ö)

–ú–æ–¥–µ–ª—å CatBoost –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∏—Å—Ö–æ–¥–∞ –º–∞—Ç—á–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–≥—Ä–æ–≤—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫.
""")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—Ä–∞–∑—Ü–∞
@st.cache_data
def create_sample_data():
    np.random.seed(42)
    n_samples = 1000
    
    # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∏–∑ –ø—Ä–∏–º–µ—Ä–∞
    data = {
        'gameId': [np.random.randint(1000000000, 9999999999) for _ in range(n_samples)],
        'gameDuration': np.random.normal(1500, 400, n_samples).astype(int),
        'blueWins': np.random.choice([0, 1], n_samples, p=[0.49, 0.51]),  # Blue side advantage
        'blueFirstBlood': np.random.choice([0, 1], n_samples, p=[0.5, 0.5]),
        'blueFirstTower': np.random.choice([0, 1], n_samples, p=[0.48, 0.52]),
        'blueFirstDragon': np.random.choice([0, 1], n_samples, p=[0.5, 0.5]),
        'blueDragonKills': np.random.poisson(2.5, n_samples),
        'blueBaronKills': np.random.poisson(1.2, n_samples),
        'blueTowerKills': np.random.poisson(6, n_samples),
        'blueKills': np.random.poisson(25, n_samples),
        'blueDeath': np.random.poisson(24, n_samples),
        'blueAssist': np.random.poisson(35, n_samples),
        'blueTotalGold': np.random.normal(55000, 15000, n_samples).astype(int),
        'blueTotalMinionKills': np.random.normal(600, 150, n_samples).astype(int),
        'blueAvgLevel': np.random.normal(13, 2, n_samples),
        'blueWardPlaced': np.random.poisson(60, n_samples),
        'blueChampionDamageDealt': np.random.normal(70000, 20000, n_samples).astype(int),
        
        'redFirstBlood': np.random.choice([0, 1], n_samples, p=[0.5, 0.5]),
        'redFirstTower': np.random.choice([0, 1], n_samples, p=[0.52, 0.48]),
        'redFirstDragon': np.random.choice([0, 1], n_samples, p=[0.5, 0.5]),
        'redDragonKills': np.random.poisson(2.3, n_samples),
        'redBaronKills': np.random.poisson(1.1, n_samples),
        'redTowerKills': np.random.poisson(5.8, n_samples),
        'redKills': np.random.poisson(24, n_samples),
        'redDeath': np.random.poisson(25, n_samples),
        'redAssist': np.random.poisson(34, n_samples),
        'redTotalGold': np.random.normal(53000, 15000, n_samples).astype(int),
        'redTotalMinionKills': np.random.normal(590, 150, n_samples).astype(int),
        'redAvgLevel': np.random.normal(12.8, 2, n_samples),
        'redWardPlaced': np.random.poisson(58, n_samples),
        'redChampionDamageDealt': np.random.normal(68000, 20000, n_samples).astype(int),
    }
    
    df = pd.DataFrame(data)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –º–µ–∂–¥—É –ø–æ–±–µ–¥–æ–π –∏ –∫–ª—é—á–µ–≤—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏
    for i in range(len(df)):
        if df.loc[i, 'blueWins'] == 1:
            # –ï—Å–ª–∏ —Å–∏–Ω–∏–µ –≤—ã–∏–≥—Ä–∞–ª–∏, –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –∏—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É
            df.loc[i, 'blueKills'] += np.random.randint(0, 10)
            df.loc[i, 'blueTotalGold'] += np.random.randint(0, 8000)
            df.loc[i, 'blueTowerKills'] += np.random.randint(0, 3)
            df.loc[i, 'redDeath'] += np.random.randint(0, 8)
        else:
            # –ï—Å–ª–∏ –∫—Ä–∞—Å–Ω—ã–µ –≤—ã–∏–≥—Ä–∞–ª–∏
            df.loc[i, 'redKills'] += np.random.randint(0, 10)
            df.loc[i, 'redTotalGold'] += np.random.randint(0, 8000)
            df.loc[i, 'redTowerKills'] += np.random.randint(0, 3)
            df.loc[i, 'blueDeath'] += np.random.randint(0, 8)
    
    return df

# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
@st.cache_resource
def train_model():
    df = create_sample_data()
    
    # –í—ã–±–∏—Ä–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –º–æ–¥–µ–ª–∏
    feature_columns = [
        'blueFirstBlood', 'blueFirstTower', 'blueFirstDragon',
        'blueDragonKills', 'blueBaronKills', 'blueTowerKills',
        'blueKills', 'blueDeath', 'blueAssist', 'blueTotalGold',
        'blueTotalMinionKills', 'blueAvgLevel', 'blueWardPlaced',
        'blueChampionDamageDealt',
        'redFirstBlood', 'redFirstTower', 'redFirstDragon',
        'redDragonKills', 'redBaronKills', 'redTowerKills',
        'redKills', 'redDeath', 'redAssist', 'redTotalGold',
        'redTotalMinionKills', 'redAvgLevel', 'redWardPlaced',
        'redChampionDamageDealt'
    ]
    
    X = df[feature_columns]
    y = df['blueWins']
    
    # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –æ–±—É—á–∞—é—â—É—é –∏ —Ç–µ—Å—Ç–æ–≤—É—é –≤—ã–±–æ—Ä–∫–∏
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    
    # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ CatBoost
    model = CatBoostClassifier(
        iterations=500,
        learning_rate=0.1,
        depth=6,
        verbose=0,
        random_seed=42
    )
    
    model.fit(X_train, y_train)
    
    # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    y_pred = model.predict(X_test)
    y_pred_proba = model.predict_proba(X_test)
    
    # –ú–µ—Ç—Ä–∏–∫–∏
    accuracy = accuracy_score(y_test, y_pred)
    
    # –í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    feature_importance = model.get_feature_importance()
    feature_names = X.columns.tolist()
    
    return model, accuracy, y_test, y_pred, y_pred_proba, feature_importance, feature_names, df

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∏ –¥–∞–Ω–Ω—ã—Ö
model, accuracy, y_test, y_pred, y_pred_proba, feature_importance, feature_names, df = train_model()

# –ú–Ω–æ–≥–æ–∫–æ–ª–æ–Ω–æ—á–Ω—ã–π –º–∞–∫–µ—Ç –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
col1, col2, col3 = st.columns([1, 1, 1])

# –ì—Ä–∞—Ñ–∏–∫ 1: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ (Confusion Matrix)
with col1:
    st.subheader("üìä –ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫ –º–æ–¥–µ–ª–∏")
    
    cm = confusion_matrix(y_test, y_pred)
    
    fig_cm = ff.create_annotated_heatmap(
        z=cm,
        x=['–ö—Ä–∞—Å–Ω—ã–µ –≤—ã–∏–≥—Ä–∞–ª–∏', '–°–∏–Ω–∏–µ –≤—ã–∏–≥—Ä–∞–ª–∏'],
        y=['–ö—Ä–∞—Å–Ω—ã–µ –≤—ã–∏–≥—Ä–∞–ª–∏', '–°–∏–Ω–∏–µ –≤—ã–∏–≥—Ä–∞–ª–∏'],
        colorscale='Blues',
        showscale=True
    )
    
    fig_cm.update_layout(
        title='–ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫',
        xaxis_title='–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è',
        yaxis_title='–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è',
        height=350,
        font=dict(size=10)
    )
    
    st.plotly_chart(fig_cm, use_container_width=True)
    
    # –¢–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏
    st.metric("üéØ –¢–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏", f"{accuracy:.3f}", f"{(accuracy-0.5)*100:+.1f}% –æ—Ç —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏")

# –ì—Ä–∞—Ñ–∏–∫ 2: –í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
with col2:
    st.subheader("üîç –í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
    
    # –¢–æ–ø-10 –Ω–∞–∏–±–æ–ª–µ–µ –≤–∞–∂–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    importance_df = pd.DataFrame({
        'feature': feature_names,
        'importance': feature_importance
    }).sort_values('importance', ascending=True).tail(10)
    
    fig_importance = px.bar(
        importance_df,
        x='importance',
        y='feature',
        orientation='h',
        title='–¢–æ–ø-10 –≤–∞–∂–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤',
        color='importance',
        color_continuous_scale='viridis'
    )
    
    fig_importance.update_layout(
        height=350,
        font=dict(size=10),
        showlegend=False
    )
    
    st.plotly_chart(fig_importance, use_container_width=True)

# –ì—Ä–∞—Ñ–∏–∫ 3: –ê–Ω–∞–ª–∏–∑ –∏–≥—Ä–æ–≤—ã—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫
with col3:
    st.subheader("‚öîÔ∏è –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥")
    
    # –°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫ –¥–ª—è –ø–æ–±–µ–¥ –∫–∞–∂–¥–æ–π –∫–æ–º–∞–Ω–¥—ã
    blue_wins = df[df['blueWins'] == 1]
    red_wins = df[df['blueWins'] == 0]
    
    metrics = ['Kills', 'TotalGold', 'TowerKills', 'DragonKills']
    blue_metrics = [
        blue_wins['blueKills'].mean(),
        blue_wins['blueTotalGold'].mean(),
        blue_wins['blueTowerKills'].mean(),
        blue_wins['blueDragonKills'].mean()
    ]
    red_metrics = [
        red_wins['redKills'].mean(),
        red_wins['redTotalGold'].mean(),
        red_wins['redTowerKills'].mean(),
        red_wins['redDragonKills'].mean()
    ]
    
    fig_comparison = go.Figure()
    
    fig_comparison.add_trace(go.Scatterpolar(
        r=blue_metrics,
        theta=metrics,
        fill='toself',
        name='–°–∏–Ω—è—è –∫–æ–º–∞–Ω–¥–∞',
        line_color='blue'
    ))
    
    fig_comparison.add_trace(go.Scatterpolar(
        r=red_metrics,
        theta=metrics,
        fill='toself',
        name='–ö—Ä–∞—Å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞',
        line_color='red'
    ))
    
    fig_comparison.update_layout(
        polar=dict(
            radialaxis=dict(
                visible=True,
                range=[0, max(max(blue_metrics), max(red_metrics)) * 1.1]
            )),
        showlegend=True,
        title='–°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø—Ä–∏ –ø–æ–±–µ–¥–µ',
        height=350,
        font=dict(size=10)
    )
    
    st.plotly_chart(fig_comparison, use_container_width=True)

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏
st.markdown("---")

col4, col5 = st.columns([1, 1])

with col4:
    st.subheader("üìà –ú–µ—Ç—Ä–∏–∫–∏ –º–æ–¥–µ–ª–∏")
    
    # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
    prob_df = pd.DataFrame({
        '–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–±–µ–¥—ã —Å–∏–Ω–∏—Ö': y_pred_proba[:, 1],
        '–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç': y_test.values
    })
    
    fig_prob = px.histogram(
        prob_df,
        x='–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–±–µ–¥—ã —Å–∏–Ω–∏—Ö',
        color='–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç',
        nbins=20,
        title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π',
        color_discrete_map={0: 'red', 1: 'blue'}
    )
    
    fig_prob.update_layout(height=300)
    st.plotly_chart(fig_prob, use_container_width=True)

with col5:
    st.subheader("üéÆ –ö–ª—é—á–µ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã")
    
    st.markdown(f"""
    **–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏ CatBoost:**
    - –¢–æ—á–Ω–æ—Å—Ç—å: **{accuracy:.1%}**
    - –†–∞–∑–º–µ—Ä –¥–∞—Ç–∞—Å–µ—Ç–∞: **{len(df):,} –∏–≥—Ä**
    - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: **{len(feature_names)}**
    
    **–¢–æ–ø-3 –≤–∞–∂–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–∞ –ø–æ–±–µ–¥—ã:**
    1. {feature_names[np.argsort(feature_importance)[-1]]}
    2. {feature_names[np.argsort(feature_importance)[-2]]} 
    3. {feature_names[np.argsort(feature_importance)[-3]]}
    
    **–ë–∞–ª–∞–Ω—Å –∫–æ–º–∞–Ω–¥:**
    - –ü–æ–±–µ–¥ —Å–∏–Ω–∏—Ö: {(df['blueWins'] == 1).sum()} ({(df['blueWins'] == 1).mean():.1%})
    - –ü–æ–±–µ–¥ –∫—Ä–∞—Å–Ω—ã—Ö: {(df['blueWins'] == 0).sum()} ({(df['blueWins'] == 0).mean():.1%})
    """)

# –ü–æ–¥–≤–∞–ª
st.markdown("---")
st.markdown("*–î–∞—à–±–æ—Ä–¥ —Å–æ–∑–¥–∞–Ω —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Streamlit, CatBoost –∏ Plotly –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö League of Legends*")
