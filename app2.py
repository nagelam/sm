import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from catboost import CatBoostClassifier
from sklearn.metrics import accuracy_score, confusion_matrix
import warnings
from pathlib import Path

warnings.filterwarnings("ignore")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  –ù–ê–°–¢–†–û–ô–ö–ò –°–¢–†–ê–ù–ò–¶–´  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
st.set_page_config(
    page_title="LoL Win Analysis ‚Äî Compact",
    layout="wide",
    initial_sidebar_state="collapsed"
)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  –§–£–ù–ö–¶–ò–ò  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@st.cache_data(show_spinner=False)
def load_data() -> pd.DataFrame:
    try:
        return pd.read_csv("./temp.csv")
    except Exception as e:
        st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å temp.csv: {e}")
        return pd.DataFrame()

@st.cache_resource(show_spinner=False)
def train(df: pd.DataFrame):
    try:
        X = df.drop(columns=["gameId", "blueWins"])
        y = df["blueWins"]
        X_tr, X_te, y_tr, y_te = train_test_split(X, y, test_size=0.2, random_state=42)
        model = CatBoostClassifier(iterations=60, random_state=42, verbose=0)
        model.fit(X_tr, y_tr)
        preds = model.predict(X_te)
        return accuracy_score(y_te, preds), confusion_matrix(y_te, preds), model
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏: {e}")
        return 0, None, None

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  –ó–ê–ì–û–õ–û–í–û–ö  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
st.markdown(
    "<h2 style='text-align:center;margin-bottom:0.3em'>–ê–Ω–∞–ª–∏–∑ –ø–æ–±–µ–¥ League of Legends</h2>"
    "<p style='text-align:center;font-size:0.8rem;margin-top:0'>–ù–∞–≥–µ–ª—å –ê.–ú. ‚Ä¢ –ü–ò-1–± ‚Ä¢ –í–∞—Ä–∏–∞–Ω—Ç 16</p>",
    unsafe_allow_html=True
)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  –î–ê–ù–ù–´–ï  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
df = load_data()
if df.empty:
    uploaded = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ temp.csv", type="csv")
    if uploaded:
        df = pd.read_csv(uploaded)
    else:
        st.stop()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  –ú–û–î–ï–õ–¨  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
acc, cm, model = train(df)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  –í–ö–õ–ê–î–ö–ò  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
tab1, tab2 = st.tabs(["üìä –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤", "üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–¥–µ–ª–∏"])

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  –ü–ï–†–í–ê–Ø –í–ö–õ–ê–î–ö–ê - –ê–ù–ê–õ–ò–ó –ü–†–ò–ó–ù–ê–ö–û–í  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
with tab1:
    col1, col2 = st.columns([1, 1], gap="medium")
    
    with col1:
        st.markdown("##### –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–∞", help="–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥/–ø–æ—Ä–∞–∂–µ–Ω–∏–π —Å–∏–Ω–µ–π –∫–æ–º–∞–Ω–¥—ã")
        fig, ax = plt.subplots(figsize=(3, 3))
        df["blueWins"].value_counts().plot.pie(
            autopct="%1.1f%%",
            labels=["–ü–æ—Ä–∞–∂–µ–Ω–∏–µ", "–ü–æ–±–µ–¥–∞"],
            colors=["#FFD6D6", "#ADD8FF"],
            textprops={"fontsize": 8},
            wedgeprops={"linewidth": 0.5, "edgecolor": "white"},
            ax=ax
        )
        ax.set_ylabel("")
        st.pyplot(fig, use_container_width=True)
        st.caption("–î–∞—Ç–∞—Å–µ—Ç —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω –ø–æ –∏—Å—Ö–æ–¥–∞–º –º–∞—Ç—á–µ–π")
    
    with col2:
        st.markdown("##### –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
        try:
            img_path = Path(__file__).parent / "2_3_2.png"
            if img_path.exists():
                st.image(str(img_path), use_column_width=True)
            else:
                st.image("2_3_2.png", use_column_width=True)
            st.caption("–í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –ø–æ–±–µ–¥—ã")
        except Exception:
            st.warning("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  –í–¢–û–†–ê–Ø –í–ö–õ–ê–î–ö–ê - –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ú–û–î–ï–õ–ò  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
with tab2:
    st.markdown("### –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–¥–µ–ª–∏")
    
    # –ë–ª–æ–∫ —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
    col1, col2, col3 = st.columns([1, 1, 1])
    
    with col1:
        st.metric("–¢–æ—á–Ω–æ—Å—Ç—å", f"{acc:.1%}" if acc else "‚Äì")
    
    with col2:
        if cm is not None:
            precision = cm[1,1] / (cm[1,1] + cm[0,1]) if (cm[1,1] + cm[0,1]) > 0 else 0
            st.metric("Precision", f"{precision:.1%}")
    
    with col3:
        if cm is not None:
            recall = cm[1,1] / (cm[1,1] + cm[1,0]) if (cm[1,1] + cm[1,0]) > 0 else 0
            st.metric("Recall", f"{recall:.1%}")
    
    st.divider()
    
    # –ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
    col1, col2 = st.columns([1.2, 1], gap="large")
    
    with col1:
        st.markdown("##### –ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫", help="–ö–∞—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –º–æ–¥–µ–ª–∏")
        if cm is not None:
            fig2, ax2 = plt.subplots(figsize=(4, 3))
            sns.heatmap(
                cm,
                annot=True,
                fmt="d",
                cmap="Blues",
                cbar=True,
                xticklabels=["–ü–æ—Ä–∞–∂–µ–Ω–∏–µ", "–ü–æ–±–µ–¥–∞"],
                yticklabels=["–ü–æ—Ä–∞–∂–µ–Ω–∏–µ", "–ü–æ–±–µ–¥–∞"],
                annot_kws={"fontsize": 12},
                ax=ax2
            )
            ax2.set_xlabel("–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ", fontsize=10)
            ax2.set_ylabel("–†–µ–∞–ª—å–Ω–æ—Å—Ç—å", fontsize=10)
            st.pyplot(fig2, use_container_width=True)
            
            # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            st.markdown("**–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:**")
            tn, fp, fn, tp = cm.ravel()
            st.write(f"‚Ä¢ –í–µ—Ä–Ω–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –ø–æ—Ä–∞–∂–µ–Ω–∏—è: {tn}")
            st.write(f"‚Ä¢ –í–µ—Ä–Ω–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –ø–æ–±–µ–¥—ã: {tp}")
            st.write(f"‚Ä¢ –õ–æ–∂–Ω—ã–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è: {fp}")
            st.write(f"‚Ä¢ –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –ø–æ–±–µ–¥—ã: {fn}")
        else:
            st.write("–ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    
    with col2:
        st.markdown("##### –û–ø–∏—Å–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏")
        st.info("""
        **CatBoost Classifier**
        - –ò—Ç–µ—Ä–∞—Ü–∏–∏: 60
        - –¢–µ—Å—Ç–æ–≤–∞—è –≤—ã–±–æ—Ä–∫–∞: 20%
        - –°–ª—É—á–∞–π–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: 42
        """)
        
        if model is not None:
            st.markdown("##### –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö")
            st.write(f"‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–∏–º–µ—Ä–æ–≤: {len(df):,}")
            st.write(f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {len(df.columns) - 2}")
            st.write(f"‚Ä¢ –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤: {df['blueWins'].value_counts()[1]}/{df['blueWins'].value_counts()[0]}")

